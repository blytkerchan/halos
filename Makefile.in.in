LIBRARIES=$$__LIBRARIES__$$
PROGRAMS=$$__PROGRAMS__$$
MODULES=$$__PROGRAMS__$$ $$__LIBRARIES__$$ $$__MODULES__$$

all : real_all

# List of all makefiles - we re-make on a makefile change
MAKEFILES = Makefile $(patsubst %,$(srcdir)/%/module.mk,$(MODULES))
## filled in by configury
# directories
srcdir=@srcdir@
vpath %.c .:$(srcdir)
vpath %.cc .:$(srcdir)
vpath %.h .:$(srcdir)
vpath %.y .:$(srcdir)
vpath %.S .:$(srcdir)

# the shell
SHELL=@SHELL@
# target architecture
ARCH=@ARCH@
# C ompiler
CC=@CC@
# assembler
AS=@CC@
top_builddir=.
# flags
CFLAGS=@CFLAGS@
CPPFLAGS=@CPPFLAGS@ @DEFS@
LDFLAGS=@LDFLAGS@

# look for include files in each of the modules:
CFLAGS += -Wall -Werror -I. -I$(srcdir)

# extra libs if required
LIBS := @LIBS@

# each module will add to this
SRC :=
CXX_SRC :=
GLIB_SRC :=

# include the description of each module
include $(patsubst %,$(srcdir)/%/module.mk,$(MODULES))

# conditional code
ifeq ($(DO_CXX),true)
	SRC += $(CXX_SRC)
endif
ifeq ($(DO_GLIB),true)
	SRC += $(GLIB_SRC)
endif

# determine the object files
define OBJ_template
$(1)_OBJ :=	$$(patsubst %.c,$(1)/%.o,$$(filter %.c,$$($(1)_SRC))) \
		$$(patsubst %.S,$(1)/%.o,$$(filter %.S,$$($(1)_SRC)))
OBJ += $$($(1)_OBJ)
endef
$(foreach mod,$(MODULES),$(eval $(call OBJ_template,$(mod))))

# library linking rules
include $(srcdir)/link.mk

# include dependencies
include $(OBJ:.o=.d)

define LTLIBRARIES_function
ifeq ($(1),arch)
	LTLIBRARIES += libarch
else
	LTLIBRARIES += $(1)
endif
endef
$(foreach lib,$(LIBRARIES),$(eval $(call LTLIBRARIES_function,$(lib))))

# dependencies for library targets
libarch_OBJ:=$(arch_OBJ)

real_all : $(patsubst %,%.a,$(LIBRARIES)) $(patsubst %,%.exe,$(PROGRAMS)) $$__KERNEL__$$ install_kernel

# calculate C include dependencies
%.d : %.c $(MAKEFILES)
	mkdir -p `dirname $@`
	$(SHELL) $(srcdir)/depend.sh -c `dirname $<` $(CFLAGS) $(CPPFLAGS) $< > $@

%.d : %.S $(MAKEFILES)
	mkdir -p `dirname $@`
	$(SHELL) $(srcdir)/depend.sh -S `dirname $<` $(CPPFLAGS) $< > $@

# compile rules
%.o : %.c $(MAKEFILES)
	$(CC) $(CFLAGS) $(CPPFLAGS) -c -o $@ $<

%.o : %.S $(MAKEFILE)
	$(AS) $(CPPFLAGS) -c -o $@ $<

# dependencies for configury-related files
Makefile : $(srcdir)/Makefile.in $(srcdir)/link.mk
	$(SHELL) config.status

$(srcdir)/Makefile.in : $(srcdir)/Makefile.in.in
	cd $(srcdir) && bash bootstrap.sh

$(srcdir)/configure.ac : $(srcdir)/configure.ac.in
	cd $(srcdir) && bash bootstrap.sh

config.status : $(srcdir)/configure
	$(SHELL) $(srcdir)/configure

$(srcdir)/configure : $(srcdir)/configure.ac
	cd $(srcdir) && bash bootstrap.sh

$(srcdir)/link.mk : $(srcdir)/bootstrap.sh
	cd $(srcdir) && bash bootstrap.sh

install_kernel : $$__KERNEL__$$ grub.img bochsrc
	mkdir -p img
	sudo mount -o loop grub.img img
	sudo cp halos img/boot/
	sudo umount img

grub.img : $(srcdir)/bochs/grub.img.gz
	gunzip -c $< > $@

bochsrc : $(srcdir)/bochs/bochsrc
	cp $< $@

